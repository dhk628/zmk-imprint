#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#include "defs.dtsi"

/ {
    behaviors {
        home_row_mod_left: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MOD_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 56 57 58 59 60 61 62 63 72 73 74 75 76 77 78 79 55 38 37 36 35>;
        };

        home_row_mod_right: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MOD_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71 41 42 43 44>;
        };

        thumb_layer: thumb_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
        };
    };

    macros {
        //------------------------------------------------------------------------
        //
        // Cursor macros
        //
        //------------------------------------------------------------------------
        //
        // SELECT_WORD_DELAY defines how long the macro waits (milliseconds)
        // after moving the cursor before it selects a word.  A larger delay
        // may allow the macro to move to the next word upon each invocation.
        //

        #ifndef SELECT_WORD_DELAY
        #define SELECT_WORD_DELAY 1
        #endif

        #define select_all kp _C(A)

        ZMK_MACRO(

        select_none,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp DOWN &kp UP &kp RIGHT &kp LEFT>;

        )

        //
        // select a word (jumps to next word upon each successive invocation)
        //

        select_word: select_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&select_word_right>, <&select_word_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ZMK_MACRO(

        select_word_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _WORD(RIGHT) &kp _WORD(LEFT) &kp _WORD(LS(RIGHT))>;

        )
        ZMK_MACRO(

        select_word_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _WORD(LEFT) &kp _WORD(RIGHT) &kp _WORD(LS(LEFT))>;

        )

        //
        // extend current selection by one word
        //

        extend_word: extend_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&extend_word_right>, <&extend_word_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ZMK_MACRO(

        extend_word_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _WORD(LS(RIGHT))>;

        )
        ZMK_MACRO(

        extend_word_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _WORD(LS(LEFT))>;

        )

        //
        // select current line
        //

        select_line: select_line {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&select_line_right>, <&select_line_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ZMK_MACRO(

        select_line_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _HOME &kp LS(_END)>;

        )
        ZMK_MACRO(

        select_line_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _END &kp LS(_HOME)>;

        )

        //
        // extend current selection by one line
        //

        extend_line: extend_line {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&extend_line_right>, <&extend_line_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        alt_tap_dance: alt_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "ALT_TAP_DANCE";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT>, <&kp RIGHT_ALT>;
        };

        ZMK_MACRO(

        extend_line_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp LS(DOWN) &kp LS(_END)>;

        )
        ZMK_MACRO(

        extend_line_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp LS(UP) &kp LS(_HOME)>;

        )
    };

    combos {
        compatible = "zmk,combos";

        kl {
            bindings = <&kp UNDERSCORE>;
            key-positions = <43 42>;
            layers = <0 1>;
        };

        jk {
            bindings = <&kp UNDERSCORE>;
            key-positions = <41 42>;
        };
    };

    chosen { zmk,matrix-transform = &imprint_number_row;
    };

    keymap {
        compatible = "zmk,keymap";

        // 0
        default_layer {
            bindings = <
&kp ESCAPE        &kp N1  &kp N2                         &kp N3                             &kp N4                           &kp N5                                         &kp N6  &kp N7                             &kp N8                               &kp N9                           &kp N0    &kp BACKSPACE
&kp TAB           &kp Q   &kp W                          &kp E                              &kp R                            &kp T                                          &kp Y   &kp U                              &kp I                                &kp O                            &kp P     &kp BSLH
&kp LEFT_CONTROL  &kp A   &home_row_mod_left LEFT_ALT S  &home_row_mod_left LEFT_CONTROL D  &home_row_mod_left LEFT_SHIFT F  &kp G                                          &kp H   &home_row_mod_right RIGHT_SHIFT J  &home_row_mod_right RIGHT_CONTROL K  &home_row_mod_right RIGHT_ALT L  &kp SEMI  &kp ENTER
&kp LEFT_SHIFT    &kp Z   &kp X                          &kp C                              &kp V                            &kp B                                          &kp N   &kp M                              &kp COMMA                            &kp DOT                          &kp FSLH  &kp RIGHT_SHIFT
                          &kp UP_ARROW                   &kp DOWN_ARROW                                                                                                                                                &kp LEFT_ARROW                       &kp RIGHT_ARROW
                                                                                            &alt_tap_dance            &kp LEFT_GUI          &mo 5                                           &mkp LCLK   &mkp RCLK  &kp CAPS
                                                                                            &thumb_layer 1 BACKSPACE  &thumb_layer 3 ENTER  &thumb_layer 4 DELETE                           &kp ESCAPE  &kp TAB    &thumb_layer 2 SPACE
            >;
        };

        //1
        navnum {
            bindings = <
&none        &kp F1     &kp F2      &kp F3     &kp F4         &kp F5                                                                       &kp F6        &kp F7  &kp F8          &kp F9      &kp F10      &kp AT
&none        &kp PG_UP  &kp _PASTE  &kp UP     &kp _COPY      &kp PG_DN                                                                    &kp ASTERISK  &kp N4  &kp N5          &kp N6      &kp SLASH    &kp DOLLAR
&kp LA(TAB)  &kp HOME   &kp LEFT    &kp DOWN   &kp RIGHT      &kp END                                                                      &kp PLUS      &kp N1  &kp N2          &kp N3      &kp MINUS    &kp TILDE
&kp LS(TAB)  &kp TAB    &kp ENTER   &kp SPACE  &kp BACKSPACE  &kp DELETE                                                                   &kp COLON     &kp N7  &kp N8          &kp N9      &kp PERCENT  &kp HASH
                        &none       &none                                                                                                                        &kp UNDERSCORE  &kp CARET
                                                                          &none  &none  &none  &kp LESS_THAN  &kp GREATER_THAN  &kp EQUAL
                                                                          &none  &none  &none  &kp COMMA      &kp PERIOD        &kp N0
            >;
        };

        // 2
        symbols {
            bindings = <
&none            &none         &kp MINUS  &kp LESS_THAN         &kp GREATER_THAN       &none                                                                         &none       &none          &none      &none      &none      &none
&none            &kp CARET     &kp HASH   &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp DOUBLE_QUOTES                                                             &none       &kp LEFT       &kp UP     &kp DOWN   &kp RIGHT  &none
&kp EXCLAMATION  &kp SLASH     &kp MINUS  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SINGLE_QUOTE                                                              &kp DELETE  &kp BACKSPACE  &kp SPACE  &kp ENTER  &kp TAB    &kp LS(TAB)
&kp PERCENT      &kp ASTERISK  &kp PLUS   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp GRAVE                                                                     &none       &none          &none      &none      &none      &none
                               &kp TILDE  &kp PIPE                                                                                                                                              &none      &none      
                                                                                                          &kp AMPERSAND  &kp SEMI   &kp DOLLAR  &none  &none  &none
                                                                                                          &kp EQUAL      &kp COLON  &kp AT      &none  &none  &none
            >;
        };

        // 3
        cursor {
            bindings = <
&none        &none      &none       &none      &none          &none                                                 &none       &none             &none           &none           &none         &none
&none        &kp PG_UP  &kp _PASTE  &kp UP     &kp _COPY      &kp PG_DN                                             &kp _CUT    &kp _FIND         &kp _FIND_NEXT  &kp _FIND_PREV  &kp _REPLACE  &none
&none        &kp HOME   &kp LEFT    &kp DOWN   &kp RIGHT      &kp END                                               &kp _COPY   &kp LEFT_CONTROL  &kp LEFT_SHIFT  &kp LEFT_ALT    &kp LEFT_WIN  &none
&kp LS(TAB)  &kp TAB    &kp ENTER   &kp SPACE  &kp BACKSPACE  &kp DELETE                                            &kp _PASTE  &select_word      &select_line    &select_all     &select_none  &none
                        &kp _REDO   &kp _UNDO                                                                                                     &extend_word    &extend_line
                                                                          &none  &none  &none  &none  &none  &none
                                                                          &none  &none  &none  &none  &none  &none
            >;
        };

        // 4
        function {
            bindings = <
&none  &none         &none         &none             &none           &none                                                                     &none  &none   &none   &none   &none    &none
&none  &none         &none         &none             &none           &none                                                                     &none  &kp F4  &kp F5  &kp F6  &kp F11  &none
&none  &kp LEFT_WIN  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &none                                                                     &none  &kp F1  &kp F2  &kp F3  &kp F10  &none
&none  &none         &none         &none             &none           &none                                                                     &none  &kp F7  &kp F8  &kp F9  &kp F12  &none
                     &none         &none                                                                                                                      &none   &none
                                                                            &none  &none  &none  &none           &none       &kp C_MUTE
                                                                            &none  &none  &none  &kp C_PREVIOUS  &kp C_NEXT  &kp C_PLAY_PAUSE
            >;
        };

        // 5
        Keyboard_Control_Layer {
            bindings = <
 &bt BT_CLR    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                               &trans         &rgb_ug RGB_TOG  &rgb_ug RGB_EFF &trans          &trans          &trans
 &sys_reset    &trans       &trans       &trans       &trans       &studio_unlock                             &studio_unlock &rgb_ug RGB_HUI  &rgb_ug RGB_SAI &rgb_ug RGB_BRI &rgb_ug RGB_SPI &sys_reset
 &bootloader   &trans       &trans       &trans       &trans       &trans                                     &trans         &rgb_ug RGB_HUD  &rgb_ug RGB_SAD &rgb_ug RGB_BRD &rgb_ug RGB_SPD &bootloader
 &to 7         &trans       &trans       &trans       &trans       &trans                                     &trans         &trans           &trans          &trans          &trans          &to 7
                            &trans       &trans                                                                                               &trans          &trans
                                                                      &trans  &trans &trans        &trans &trans &trans
                                                                      &trans  &trans &trans        &trans &trans &trans
            >;
        };

        // 6
        Auto_Mouse_Layer {
            bindings = <
 &trans  &trans  &trans  &trans  &trans  &trans                                     &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                     &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &mkp RCLK  &mkp MCLK  &mkp LCLK  &trans                            &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                     &trans  &trans  &trans  &trans  &trans  &trans
                 &trans  &trans                                                                     &trans  &trans
                                         &trans  &trans &trans        &trans &trans &trans
                                         &trans  &trans &trans        &trans &trans &trans
            >;
        };

        // 7
        factory_test {
            bindings = <
&kp N2  &kp N3  &kp N4  &kp N5  &kp N6  &kp N7            &kp N8  &kp N9  &kp N0  &kp N1  &kp N2  &kp N3
&kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9            &kp N0  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5
&kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &kp N1            &kp N2  &kp N3  &kp N4  &kp N5  &kp N6  &kp N7
&kp N8  &kp N9  &kp N0  &kp N1  &kp N2  &kp N3            &kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9
                            &kp N2  &kp N3                                                                    &kp N7  &kp N8
                                &kp N1  &kp N2  &kp N3    &kp N4  &kp N5  &kp N6
                                &kp N7  &kp N8  &kp N9    &kp N0  &kp N1  &kp N2
            >;
        };
    };
};

// right hand trackball configuration

&trackball_peripheral_listener {
   input-processors =
    // activate layer 3 within 500ms of the trackball moving
    <&zip_temp_layer 6 500>;
};

//left hand trackball configuration

&trackball_central_listener {
    input-processors =
        // multiply sensitivity by 1, divide by 3 (make it slower for scrolling),
        <&zip_y_scaler 1 4>,
        <&zip_x_scaler 0 1>,
        // make this trackball output scrolling events by default instead of cursor movement,
        <&zip_xy_to_scroll_mapper>,
        // invert vertical scrolling so that the view moves in the same direction as the top of the trackball.,
        <&zip_scroll_transform INPUT_TRANSFORM_Y_INVERT>;
};